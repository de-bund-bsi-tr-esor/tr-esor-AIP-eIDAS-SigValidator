<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xbarch.de" xmlns:xbarch="http://www.xbarch.de" xmlns:xml="http://www.w3.org/XML/1998/namespace" targetNamespace="http://www.xbarch.de" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.4.3">
	<xs:include schemaLocation="xbarch_1_4_3.xsd"/>
	<!-- 
		XBarch-Technische Daten sind innerhalb von XBarch inline definiert. 
		Um diese Struktur im Rahmen der Erweiterung zu benutzen werden diese hier mit HIlfe eines Types abgebildet 
	-->
	<xs:complexType name="t_Technische_Daten">
		<xs:annotation>
			<xs:documentation>Technische Beschreibung der Objekte (basierend auf PREMIS) und aller Massnahmen für deren dauerhafte Archivierung. (PREMIS Homepage: http://www.loc.gov/standards/premis/)
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="objekt" maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="objektIdentifikator" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>objectIdentifier: Jedes Datenobjekt im Archivierungsspeicher muss eindeutig identifizierbar sein, um mit beschreibenden, technischen und anderen Metadaten verbunden werden zu können. Eine Kennzeichnung des Objekts kann durch das Repositorium erzeugt werden bei der Aufnahme dieses Objekts in dieses System. Sie kann aber auch ausserhalb dieses Speichersystems erzeugt oder festgelegt und als Metadatum mit einem Objekt vorgelegt werden. Ebenso können Objektkennzeichnungen automatisch oder manuell generiert werden. Es wird empfohlen, dass Repositorien hauptsächlich von ihnen selbst automatisch generierte Objektkennzeichnungen benutzen. Dadurch soll sichergestellt werden, dass Objektkennzeichnungen einmalig und durch das Repositorium benutzbar sind. Extern festgelegte Objektkennzeichnungen können sekundär benutzt werden als Verbindung zu Informationen ausserhalb des Repositoriums. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="objektIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>objectIdentifierType: Bezeichnung des Bereichs, für den der Objektidentifikator einmalig ist </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="objektIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>objectIdentifierValue: Wert des Objektindentifikators </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="archivierungsStatus" type="WL_Archivierungsstatus" minOccurs="0">
							<xs:annotation>
								<xs:documentation>preservationLevel: Manche Repositorien bieten vielfältige Archivierungsoptionen an, abhängig von Faktoren wie dem Wert oder der Einzigartigkeit des Materials, der Archivierbarkeit des Formats, dem Geldbetrag, den der Kunde zu zahlen bereit ist. usw. Die Archivierungsoption kann vom Repositorium festgesetzt oder vom Deponenten erbeten werden und dann als Metadatum vorgelegt werden. Wenn keine verschiedenen Archivierungsoptionen zur Verfügung stehen, soll der voreingestellte Wert 0 verwendet werden.  </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="objektKategorie" type="WL_Objektkategorie">
							<xs:annotation>
								<xs:documentation>objectCategory: die Kategorie des Objekts, für das Metadaten verwendet werden. Es ist wahrscheinlich, dass Repositorien mit verschiedenartigen Objektkategorien (Representation, File und Bitstream) verschieden umgehen werden bezüglich Metadaten und Datenverwaltungsfunktionen.  </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="objektTechnischeAttribute" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>objectCharacteristics: Technische Eigenschaften eines Files oder Bitstreams, die auf alle oder die meisten Formate zutreffen. Formatspezifische Eigenschaften werden in diesem Data Dictionary nicht berücksichtigt. Doch gibt es einige wichtige technische Eigenschaften, die Objekten jeden Formates eigen sind. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="kodierungsEbene" type="xs:nonNegativeInteger" minOccurs="0">
										<xs:annotation>
											<xs:documentation>compositionLevel: Ein Hinweis auf die Möglichkeit eines oder mehrerer Prozesse der Entschlüsselung oder Entbündelung auf dem Objekt. Eine Datei oder ein Bistream kann über Komprimierung, Verschlüsselung usw. codiert oder mit anderen Dateien oder Bitstreams zu grösseren Paketen geschnürt werden. Die Kenntnis der Reihenfolge dieser Vorgänge ist wichtig für eine eventuelle Wiederherstellung des ursprünglichen Objekts oder der ursprünglichen Objekte. Im Allgemeinen wird die Art der Zusammensetzung vom Repositorium angegeben, welches diesen Wert automatisch bereitstellen sollte. Falls das Objekt durch das Repositorium generiert wurde, kennt die Erstellungsroutine die Art der Zusammensetzung und kann dieses Metadatum zur Verfügung stellen. Falls das Objekt aber vom Repositorium übernommen wird, muss es die Art der Zusammensetzung über das Objekt selbst oder über extern bereitgestellte Metadaten zu identifizieren. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="datenIntegrität" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>fixity: Information zum Überprüfen eventuell nicht dokumentierter oder nicht berechtigter Änderungen am Objekt. Durch das Speichersystem automatisch berechnet und aufgezeichnet.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="pruefsummenAlgorithmus" type="xs:string">
													<xs:annotation>
														<xs:documentation>messageDigestAlgorithm: Der spezifische Algorithmus zur Berechnung des Hash-Wertes für das digitale Objekt. Pro Archiv soll ein Standard-Algorithmus verwendet werden; empfohlen werden entweder MD5 oder SHA-1. </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="pruefsummeWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>messageDigest: Das Resultat des Hash-Algorithmus. Dieser Hash-Wert muss gespeichert werden, für Vergleiche bei zukünftigen Integritätsprüfungen.  </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="pruefsummePruefer" type="xs:string" minOccurs="0">
													<xs:annotation>
														<xs:documentation>messageDigestOrginator: Die Instanz, welche den originalen Hash-Wert berechnet hat. Ein Repositorium kann Dateien aufnehmen, deren Hash-Werte von der einreichenden Instanz berechnet wurden. Eine Prüfung stellt sicher, dass empfangene und gesendete Dateien identisch sind. Das Repositorium kann auch Dateien ohne Hash-Wert aufnehmen; dann muss es diesen bei der Übernahme berechnen. Es kann nützlich sein, zu wissen, wer den originalen Hash-Wert berechnet hat.   </xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
									<xs:element name="datenmenge" minOccurs="0">
										<xs:annotation>
											<xs:documentation>size: Die Grösse der archivierten Datei oder des Bitstreams in Bytes. Dieses Element stellt sicher, dass aus dem Repositorium die korrekte Anzahl Bytes abgerufen wird und dass eine Anwendung über genügend Platz verfügt, um Dateien zu bewegen. Es könnte auch zur Berechnung von Speicherkosten verwendet werden.  </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="datenmengeEinheit" type="xs:string"/>
												<xs:element name="datenmengeWert" type="xs:string"/>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
									<xs:element name="format" minOccurs="0">
										<xs:annotation>
											<xs:documentation>format: Bezeichnung des Formats einer Datei oder einer Abfolge von Bits, wobei Format die Organisation der digitalen Information aufgrund vorgegebener spezifischer Eigenschaften bedeutet. Viele Massnahmen zur Erhaltung sind abhängig von detaillierter Kenntnis des Formats des digitalen Objektes. Eine genaue Angabe des Formats ist notwendig. Die durch einen Namen oder einen Verweis auf eine Format-Nachweisstelle erfasste Information muss ausreichend sein, um detailliertere Information über das Objekt zu erhalten.  Das Format einer Datei oder einer Abfolge von Bits sollte bei der Aufnahme ins Repositorium überprüft werden. Selbst wenn die abliefernde Stelle diese Information direkt durch Metadaten oder indirekt über die Dateinamenerweiterung mitliefert, wird empfohlen, das Format unabhängig davon nochmals zu analysieren. Falls das Format bei der Übernahme nicht bestimmt werden kann, soll festgehalten werden, dass das Format unbekannt ist. Das Archiv sollte sich anschliessend aber gleichwohl darum bemühen, das Format zu bestimmen, selbst wenn dies eine manuelle Intervention erfordert. Eine Abfolge von Bits innerhalb einer Datei kann andere Eigenschaften aufweisen als die Datei als ganzes. Ein Bitstream im LaTex-Format kann sich z.B. innerhalb einer SGML-Datei befinden, oder mehrere Bilder mit verschiedenen Farbtiefen können sich innerhalb der gleichen TIFF-Datei befinden. Das Format muss für jede Datei festgehalten werden. Wenn das Archiv das Bitstream-Format erkennt und es den Bitstream im Hinblick auf eine Archivierung anders behandeln möchte als die umfassende Datei, so kann das Format der eingebetteten Bitstreams ebenfalls festgehalten werden. 
Aufgezeichnet werden sollte entweder formatDesignation oder formatRegistry. Beide sind fakultativ, aber da das Element „format„ obligatorisch ist, muss einer der beiden Einträge erfolgen. 
 </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="erkennungsStatus" type="xs:string" minOccurs="0">
													<xs:annotation>
														<xs:documentation>erkennungsstatus: Kennzeichnet die Qualitaet der Erkennung durch DROID.</xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="formatBezeichnung" minOccurs="0">
													<xs:annotation>
														<xs:documentation>formatDesignation: Bezeichnet das Format des Objekts. Das Format oder Format-Profil sollte so spezifisch wie möglich angegeben werden. Ein Archiv (oder eine Format-Datenbank) kann dazu mehrteilige Formatbezeichnungen (Z.B. "TIFF_GeoTIFF" oder "WAVE_MPEG_BWF) verwenden. </xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:sequence>
															<xs:element name="formatName" type="xs:string">
																<xs:annotation>
																	<xs:documentation>formatName: Bezeichnet das Format der Datei oder eines Bitstreams.</xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="formatVersion" type="xs:string" minOccurs="0">
																<xs:annotation>
																	<xs:documentation>formatVersion: Version des Formats in formatName. Viele anerkannte Formen von Formatnamen gehen nicht bis auf Stufe Version hinunter, z.B. MIME-Mediatypen. Falls das Format eine Versionsangabe besitzt, so muss diese angegeben werden, entweder in numerischer oder chronologischer Form. </xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="mimeType" type="xs:string" minOccurs="0">
																<xs:annotation>
																	<xs:documentation>mimeType: MimeType, soweit von Pronom geliefert. </xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="textEncoding" type="xs:string" minOccurs="0">
																<xs:annotation>
																	<xs:documentation>bei reinen Textdateien kann hierr das Encoding hinterlegt werden (16.05.2011)</xs:documentation>
																</xs:annotation>
															</xs:element>
														</xs:sequence>
													</xs:complexType>
												</xs:element>
												<xs:element name="formatVerzeichnis" minOccurs="0" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>formatRegistry: Identifiziert und/oder gibt zusätzliche Informationen zu einem Format durch Verweis auf einen Eintrag in einer Format-Datenbank. Wenn das Archiv Zugriff auf zentrale Format-Datenbanken hat, so ist es eine hervorragende Lösung, für die genauen Formateigenschaften auf diese Stellen zu verweisen. Die PREMIS-Arbeitsgruppe geht davon aus, dass eine Anzahl von Format-Datenbanken entstehen werden, welche die digitale Archivierung unterstützen. Der Vorschlag einer Global Digital Format Registry würde zu einer via Internet zugänglichen Datenbank führen, welche detaillierte Spezifikationen der Formate und Profile enthält.    </xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:sequence>
															<xs:element name="formatVerzeichnisName" type="xs:string">
																<xs:annotation>
																	<xs:documentation>formatRegistryName: Bezeichnung der Format-Datenbank, auf welche verwiesen wird.  </xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="formatVerzeichnisIdentifikator" type="xs:string">
																<xs:annotation>
																	<xs:documentation>formatRegistryKey: Eindeutige Bezeichnung für einen Format-Eintrag in einer Format-Datenbank, auf welchen verwiesen wird.</xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="formatVerzeichnisIdentifikatorErweitert" type="xs:string" minOccurs="0" maxOccurs="unbounded">
																<xs:annotation>
																	<xs:documentation>sollten mehrere Formate erkannt werden, so koennen hier die weiteren Formate hinterlegt werden</xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="formatVerzeichnisSchwerpunkt" type="WL_FormatVerzeichnisSchwerpunkt" minOccurs="0">
																<xs:annotation>
																	<xs:documentation>formatRegistryRole: Das gleiche Format kann in verschiedenen Datenbank zu verschiedenen Zwecken verzeichnet sein. Eine Datenbank enthält z.B. detaillierte Informationen, eine andere gibt allgemeine Informationen an. Falls mehrere Datenbanken angesprochen werden, so dient dieser Eintrag dazu, sie von einander zu unterscheiden. </xs:documentation>
																</xs:annotation>
															</xs:element>
														</xs:sequence>
														<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
													</xs:complexType>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
									<xs:element name="zugriffsSperren" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>inhibitors: Eigenschaften von Objekten, die die Nutzung eines Objekts verhindern. Um auf ein Objekt im Archiv zugreifen zu können, müssen die Art und Weise der Verschlüsselung sowie der Zugriffsschlüssel verfügbar sein. Es ist wahrscheinlicher, dass ein Objekt mit einer Zugriffssperre in das Archiv gelangt, als dass das Archiv dem Objekt nachträglich eine Sperre zufügt. Oft können Sperren auch beim Ingest übersehen werden. Es ist deshalb empfehlenswert, dass die Metadaten über die Zugriffssperren schon bei der Übergabe des Objekts an das Archiv beigefügt werden.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="zugriffsSperrenTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>inhibitorType: Die verwendete technische Methode zur Sperrung des Objekts. Gebräuchliche Verfahren zur Sperrung sind Verschlüsselungen und die Verwendung von Passwörtern. Bei verschlüsselten Objekten muss der Name des technischen Verfahrens angeben werden. Bei Verwendung des Data Encryption Standards wäre die korrekte Angabe „DES“ und nicht die allgemeinen Begriffe „Verschlüsselung“ oder „verschlüsselt“. </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="zugriffsSperrenZiel" type="xs:string" minOccurs="0" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>inhibitorTarget: Die von der Sperrung betroffenen Inhalte eines Objekts. Im Zweifelsfall sollte die Angabe „gesamter Inhalt“ verwendet werden.</xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="zugriffsSperrenSchlüssel" type="xs:string" minOccurs="0">
													<xs:annotation>
														<xs:documentation>inhibitorKey: Der nötige Schlüssel/Passwort. Der Schlüssel sollte, wenn er bekannt ist, unbedingt gespeichert werden. Bei Objekten, bei denen die Sperrung aus wichtigen Gründen und zur unbedingten Geheimhaltung der Inhalte vorgenommen wurde, sollten die Schlüssel oder Passwörter nur an gesicherten Orten gespeichert werden.</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
									<xs:element name="wesentlicheEigenschaften" type="xs:string" minOccurs="0">
										<xs:annotation>
											<xs:documentation>significantProperties: Eigenschaften eines bestimmten Objekts, welche subjektiv als wichtig erachtet werden und daher beim Prozess des Archivierens erhalten bleiben sollen. Objekte können die technisch gleichen Eigenschaften besitzen, jedoch sollen nicht in allen Fällen diese Eigenschaften erhalten bleiben. Spezifische Eigenschaften können für alle Objekte einer bestimmten Klasse zutreffen. Das Repositorium kann z.B. entscheiden, dass bei allen PDF-Dateien bloss der Inhalt gespeichert werden soll. In andern Fällen, z.B. bei Medien, können die spezifischen Eigenschaften für jedes Objekt einmalig sein. Wenn diese Werte einmalig sind, so müssen sie entweder von der abliefernden Stelle mitgeliefert werden oder vom Personal des Repositoriums zur Verfügung gestellt werden. Signifikante Eigenschaften können objektive technische Eigenschaften sein, welche subjektiv als wichtig erachtet werden. Ein PDF enthält z.B. Links, welche nicht als wichtig betrachtet werden, und JavaScript, das wichtig ist. Oder für eine künftige Migration eines TIFF-Bildes ist es bedeutsam, dass die Linien und Farben in hoher Qualität erhalten bleiben. 
Das Auflisten signifikanter Eigenschaften hat zur Folge, dass das Repositorium diese auch nach zukünftigen Migrationen erhalten will. Falls dennoch Veränderungen auftreten, so wird das Archiv diese vermerken. Es fehlt noch an Erfahrung mit digitaler Archivierung, um den besten Weg anzugeben, wie diese Information vermerkt wird. 
Eine Möglichkeit ist die Verwendung der Information über die vorgenommenen Eingriffe an einem Objekt: Objekt A besitzt die signifikanten Eigenschaften Volumen und Zeit, welche als significantProperties von A verzeichnet sind. In der migrierten Version B wurden die Zeitangaben verändert, was zu einer Notiz im Ergebnisprotokoll des Migrationsvorgangs führt. In Zukunft wird nur noch Umfang als signifikante Eigenschaft von B aufgeführt.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="erzeugendesProgram" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>creatingApplication: Information zur Produktiv-Applikation. Lösungshilfe bei Problemfällen im Fall von Konvertierung, z.B. uneinheitliches Verhalten von Objekten aus unterschiedlichen Versionen. Erfahrungsgemäss werden die Standards in den einzelnen Applikationen nicht zu 100% eingehalten (Typen von Variablen in SQL, Unicode bei Microsoft, etc.). Die Information soll für Objekte in der Verwaltung und für Objekte im Repositorium (nach einer Migration) nachgeführt werden. Sind mehrere Applikationen beteiligt, so sollen beide beschrieben werden (z.B. Word-Dokument in pdf gewandelt / Archivierung des pdf oder html-File erzeugt mit Dreamweaver / Snapshot für das Archiv erzeugt mit dem Web crawler Heritrix). 
Die Information in diesen Feldern soll möglichst auf eine Datenbank (Registry) verweisen. 
  </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="erzeugendesProgramName" type="xs:string" minOccurs="0">
										<xs:annotation>
											<xs:documentation>creatingApplicationName: Bezeichnung der Produktiv-Applikation. Die Produktiv-Applikation ist die Applikation, mit welcher das Objekt erzeugt wurde (nicht die Applikation, die zur Speicherung verwendet wird wie z.B. ein storage management system).  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="erzeugendesProgramVersion" type="xs:string" minOccurs="0">
										<xs:annotation>
											<xs:documentation>creatingApplicationVersion: Version der Produktiv-Applikation  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="erzeugtAm" minOccurs="0">
										<xs:annotation>
											<xs:documentation>dateCreatedByApplication: Datum und Zeit, an welchem Objekt erzeugt wurde. Element hat den data type  dateTime, eine Untermenge der ISO 8601, Bsp. 2006-07-10T14:29:53+01:00. Der präziseste verfügbare Wert wird gespeichert, und zwar derjenige der ersten Erzeugung; Daten für Kopien werden unter Event gespeichert. Wenn für ein Objekt ein internes Erzeugungs- und ein Modifikationsdatum verfügbar sind, so sollte das Modifikationsdatum verwendet werden. 
Bei Einsatz eines Webharvesters soll das Datum des Capturing gespeichert werden. 
</xs:documentation>
										</xs:annotation>
										<xs:simpleType>
											<xs:union memberTypes="xs:date xs:dateTime"/>
										</xs:simpleType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="urspruenglicherName" minOccurs="0">
							<xs:annotation>
								<xs:documentation>originalName: Der Name, den das Objekt bei der Übermittlung an das Archiv trägt, bevor er aus organisatorischen Gründen im Archiv geändert wird. Das Objekt kann außerhalb des Archivs unter einem anderen Namen bekannt sein als innerhalb des Archivs. Ein Nutzer könnte ein Objekt unter seinem ursprünglichen Namen anfordern. Auch zur Rekonstruktion von Linkstrukturen muss der originale Name bekannt sein. Die Angabe sollte von der Abgebenden Instanz an das Archiv übermittelt werden. Wenn die Abgabe automatisiert erfolgt, sollte die entsprechende Software den Objektnamen übermitteln. Wie genau die Angaben zum Speicherpfad sind (s. Bsp.) hängt von den Ansprüchen des Archivs ab. Dies ist der Name des Objekts der mit dem Submission Information Package geliefert wird. Dieselbe Datei kann in unterschiedlichen Kontexten verschiedene Namen tragen.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="speicherung" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>storage: Information zur Speicherung eines Files im Speichersystem (wie und wo). Das Repositorium muss den Speicherort mit einem Speichermedium assoziieren können. In der Regel handelt es sich um einen Speicherort und ein Medium pro Objekt. Gibt es (bit-weise identische) Kopien, die - mit der Ausnahme des Mediums - als Einheit verwaltet werden, dann muss die Information wiederholbar sein. (Im Repositorium müssen auch diese Objekte als einzelne Objekte verwaltet werden)   </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="speicherortAngabe" minOccurs="0">
										<xs:annotation>
											<xs:documentation>contentLocation: Information, die notwendig ist, um ein File oder einen Bitstream innerhalb eines Files zu finden. </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="speicherortAngabeTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>contentLocationType: Bezeichnung des Bereichs, für den der Speicherortidentifikator einmalig ist. Es ist notwendig, das Schema für die Lokalisierung zu kennen. </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="speicherortAngabeWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>contentLocationValue:  Wert des Speicherortidentifikators. Es kann sich um einen voll qualifizierten Pfad / Filenamen handeln oder um einen Zeiger auf weitere Information (resolution system), die vom Storage Management System auch benutzt wird. Bei Bitstreams oder Filestreams wird in der Regel Bezug auf den Anfang genommen. </xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
											<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
										</xs:complexType>
									</xs:element>
									<xs:element name="speicherMedium" type="xs:string">
										<xs:annotation>
											<xs:documentation>storageMedium: Diese Information ist notwendig für das Repositorium, um die Medienerneuerung oder Migration zu organisieren. In einigen Fällen kann das Speichermedium durch das Storage Management System im Repositorium unsichtbar gemacht werden. Die technologische Alterung/Veralterung muss aber auf jeden Fall durch das Repositorium kontrolliert und verwaltet werden können. 
In einigen Fällen genügt es, das System zu bezeichnen, welches das Medium kennt (z.B. Tivoli Storage Manager) 
 </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="signaturInformation" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>signatureInformation: Nötige Information zur Verwendung von digitalen Signaturen. Diese dienen der Authentisierung des Signierers und/oder der im Objekt enthaltenden Informationen. Ein Archiv kann Bestimmungen haben, die ein Signieren der eingehenden Objekte vorschreiben oder es speichert signierte Objekte, die einer späteren Gültigkeitsprüfung unterzogen werden müssen. Einige Komponenten des Elements signaturInformation stammen aus der Arbeit des W3C XML-Signature Syntax and Processing; siehe www.w3.org/TR/2002/REC-xmldsig-core-20020212/ für weitere Informationen über die Bedeutung der Elemente.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="signaturInformationKodierung" type="xs:string">
										<xs:annotation>
											<xs:documentation>signatureInformationEncoding: Die Kodierung, die für die Werte der Elemente signaturWert, schluesselInformation und zertifikatsInformation verwendet wird. Ohne Kenntnisse über ihre Kodierung können die Werte nicht korrekt interpretiert werden.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="signierer" type="xs:string" minOccurs="0">
										<xs:annotation>
											<xs:documentation>signer: Die Person, Institution oder Autorität, die für die Signierung verantwortlich ist. Die Information über den Signierer ist manchmal auch über die schlüsselInformation verfügbar, aber es ist übersichtlicher wenn die Angabe in diesem Element verzeichnet ist. Wenn der Signierer einen Eintrag unter „Agent“ hat, kann an dieser Stelle der agentIdentifikatorWert als Referenz verwendet werden.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="signaturMethode" type="xs:string">
										<xs:annotation>
											<xs:documentation>signatureMethod: Die Bezeichnung für die Verschlüsselungsmethode und den Hash-Algorithmus in der verwendeten Signatur. Die selben Algorithmen werden für die Gültigkeitsprüfung benötigt. Empfohlene Schreibweise: Verschlüsselungsalgorithmus – Hash-Algorithmus </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="signaturWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>signatureValue: Die digitale Signatur. Eine Prüfsumme, die mit einem einmaligen privaten Schlüssel erstellt wird. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="signaturGueltigkeitspruefungRegeln" type="xs:string">
										<xs:annotation>
											<xs:documentation>signatureValidationRules: Die Angabe der Operation, die bei der Gültigkeitsprüfung angewendet wird. Ein Archiv kann nicht von der Annahme ausgehen, dass alle Verfahren zur Prüfung von Signaturen in ferner Zukunft noch bekannt sind. Falls das Objekt vor der Signierung einer Normalisierung unterzogen wurde, sollte die Kanonikalisierungsmethode mit angegeben werden. 
An dieser Stelle kann auch ein Verweis auf eine umfassende technische Dokumentation stehen.   </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="signaturEigenschaften" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>signatureProperties: Zusätzliche Infomationen über die technische Generation der Signatur. Dieses Element kann eine Zeitangabe zur Bezeichnung der technischen Generation der Signatur, die Seriennummer der speziellen, zur Verschlüsselung verwendeten Hardware sowie andere wichtige Angaben zur technischen Generation der Signatur beinhalten.  </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:any namespace="##any" processContents="lax"/>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
									<xs:element name="schluesselInformation" minOccurs="0">
										<xs:annotation>
											<xs:documentation>keyInformation: Informationen über den öffentlichen Schlüssel des Signierers, die zur Prüfung der Signatur benötigt werden. Um die Gültigkeit einer Signatur zu prüfen, muss erneut der Hashwert des Objekts berechnet werden. Mit Hilfe des privaten Schlüssels wird dann überprüft, ob der signaturWert dem neu berechneten Hashwert entspricht. Das Archiv muss deshalb im Besitz des Wertes des öffentlichen Schlüssels (schlüsselWert) sein und zudem sicher sein, dass dieser öffentliche Schlüssel wirklich dem angegebenen Signierer gehört.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="schluesselTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>keyType: Die Art des Schlüssels, bezeichnet durch den Namen des Algorithmus, der zur Generierung des Schlüssels verwendet wurde.</xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="schluesselWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>keyValue: Der Wert des öffentlichen Schlüssels des Signierers. Der öffentliche Schlüssel könnte auch im X509 Zertifikat des Signierers enthalten sein. Da der schluesselWert aber sehr wichtig für Archivierung ist, ist es sinnvoll, ihn in einem seperaten Feld zu verzeichnen. Die Schlüssel können je nach Typ in ihrer Struktur und ihren Paramentern Unterschiede aufweisen. Es wird empfohlen, die Schlüsselwerte nach den Vorgaben des W3C XML-Signature Syntax and Processing (www.w3.org/TR/2002/REC-xmldsig-core-20020212/) zu verzeichnen.</xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="schluesselBeglaubigungsInformation" type="xs:string" minOccurs="0">
													<xs:annotation>
														<xs:documentation>keyVerificationInformation: Zusätzliche Information, die dazu dient, die Zusammengehörigkeit des öffentlichen Schlüssels und des Signierers vertrauenswürdig zu bestätigen. Das Element könnte Angaben zu Zertifikaten oder Zertifikatsketten und oder Ungültigkeitserklärungen enthalten. Archive werden wahrscheinlich eine passende Struktur für das Feld keyVerificationInformation definieren wollen.</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="objektBeziehungen" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>relationship: Informationen über die Beziehung zwischen einem Objekt zu anderen Objekten. Bei der Archivierung haben wir es mit komplexen Objekten zu tun, die sich aus anderen Objekten zusammensetzen. Das Element relationship und seine Unterelemente erlauben es, diese Beziehungen summarisch abzubilden.  </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="objektBeziehungenTyp" type="WL_ObjektBeziehungenTyp">
										<xs:annotation>
											<xs:documentation>relationshipType: eine Grobkategorisierung der Art der Beziehung. Wir werden es zunächst nur mit strukturellen Beziehungen zu tun haben, die durch relationshipSubType näher charakterisiert werden. Deshalb wird vorgeschlagen, für relationshipType standardmässig „strukturell„ einzusetzen. Derivative Beziehungen ergeben sich, wenn Objekte migriert werden. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="objektBeziehungenUnterTyp" type="WL_ObjektBeziehungenUnterTyp">
										<xs:annotation>
											<xs:documentation>relationshipSubType: eine feinere Charakterisierung der Art der Beziehung; präzisiert „objektBeziehungenTyp„ . Vorschläge für die Werte: 
has root: zusammengesetztes Objekt hat ein Root-Objekt, das z.B. die Struktur angibt 
has data / is data of: bezeichnet Datenfiles 
is parent of / is child of: bezeichnet Über- bzw. Unterordnung 
has part / is part of: bezeichnet Zugehörigkeit von Objekten zu anderen 
is derived of: bezeichnet Entstehung eines Objekts aus einem anderen  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="beziehungsObjektIdentifikator" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>relatedObjectIdentification: identifiziert das Objekt, zu dem die Beziehung besteht. </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="beziehungsObjektIdentifikatorTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>relatedObjectIdentifierType: Bezeichnung des Bereichs, für den der Objektidentifikator einmalig ist. </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="beziehungsObjektIdentifikatorWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>relatedObjectIdentifierValue: Wert des Objektidentifikators. </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="beziehungsObjektStelle" type="xs:nonNegativeInteger">
													<xs:annotation>
														<xs:documentation>relatedObjectSequence: die Reihenfolge des referenzierten Objekts in Bezug auf andere Objekte, die in der gleichen Beziehung stehen. Falls die Reihenfolge keine Rolle spielt, soll der Default-Wert 0 verwendet werden (kann voreingestellt werden).   </xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
											<xs:attribute name="RelObjectXmlID" type="xs:IDREF" use="optional"/>
											<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
										</xs:complexType>
									</xs:element>
									<xs:element name="beziehungsEreignisIdentifikation" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>relatedEventIdentification: identifiziert einen Event, der mit der Beziehung in Zusammenhang steht. Die Beziehung kann auf Grund eines Events entstanden sein.  </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="beziehungsEreignisIdentifikatorTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>relatedEventIdentifierType: Bezeichnung des Bereichs, für den der Eventidentifikator einmalig ist. soll standardmässig leer gelassen werden.  </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="beziehungsEreignisIdentifikatorWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>relatedEventIdentifierValue: Wert des Eventidentifikators. soll standardmässig leer gelassen werden.  </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="beziehungsEreignisStelle" type="xs:nonNegativeInteger">
													<xs:annotation>
														<xs:documentation>relatedEventSequence: Angabe zur Abfolge der Ereignisse. Die Reihenfolge der Ereignisse kann über das Element „EreignisZeitpunkt“ der entsprechenden Ereignisse nachvolzogen werden.  </xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
											<xs:attribute name="RelEventXmlID" type="xs:IDREF" use="optional"/>
											<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepftesEreignisIdentifikator" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>linkingEventIdentifier: Referenz auf einen Vorgang, der mit dem Objekt verknüpft ist. Wird zur Verknüpfung mit Vorgängen (zB. Format-, oder Virenprüfung) benützt, die nicht mit Beziehungen zwischen Objekten zusammenhängen. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepftesEreignisIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingEventIdentifierType: Bezeichnung des Bereichs, für den der Eventidentifikator einmalig ist. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepftesEreignisIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingEventIdentifierValue: Wert des Eventidentifikators </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="LinkEventXmlID" type="xs:IDREF" use="optional"/>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepfteIntellektuelleEntitaetIdentifikator" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>linkingIntellectualEntityIdentifier: Referenz auf eine inhaltliche Einheit, die mit dem Objekt verknüpft ist. Wird zur Verknüpfung mit mit inhaltlichen Einheiten benützt, die mit dem Objekt verknüpft sind. Dies kann ein Link zu Metadaten oder einem sonstigen Stellvertreter sein. Die verknüpfte inhaltliche Einheit ist meist auf einer höheren Hierarchiestufe, zB. eine Sammlung / ein Bestand oder ein Elternobjekt. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepfteIntellektuelleEntitätIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingIntellectualEntityIdentifierType: Bezeichnung des Bereichs, für den der Identifikator der intellektuellen Entität einmalig ist. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepfteIntellektuelleEntitätIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingIntellectualEntityIdentifierValue: Wert des Identifikators der intellektuellen Entität.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepfteTechnischeUmgebungIdentifikation" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Referenz auf eine technische Umgebung, in der das Objekt darstellbar ist.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepfteTechnischeUmgebungIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>Bezeichnung des Bereichs, für den der Identifikator der technischen Umgebung einmalig ist.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepfteTechnischeUmgebungIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>Wert des Identifikators der technischen Umgebungsbeschreibung.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="LinkEnvironmentXmlID" type="xs:IDREF" use="optional"/>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="initialName" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Dateiname vor Umbenennung falls eine Umbenennung aus technologischen Gründen während des Pre Ingest erfolgt ist</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="type">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="file"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="xmlID" type="xs:ID"/>
					<xs:attribute name="version" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="1.1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="technischeUmgebung" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>environment: Hardware/Software-Kombinationen, welche den Gebrauch des Objektes unterstützen. Die Ausgabe und Interaktion von und mit den Objekten werden durch eine bestimmte EDV-Umgebung ermöglicht. Herauslösung aus dem EDV-Kontext kann zur Unbrauchbarkeit führen. Wenn ein Repositorium Objekte nur auf Bit-Level archiviert, braucht es diese Information nicht. 
Die Information sollte nicht lokal zu jedem Objekt, sondern allgemein in einer Registry erfasst werden. 
Die Information kann von einer Representation auf die Files vererbt werden, muss also nicht für jedes File separat erfasst werden.
</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="technischeUmgebungIdentifikator" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>jede im Repositorium aufgezeichnete technische Umgebung muss eine eindeutige Kennzeichnung haben, mittels der sie mit Objekten und  Ereignissen verknüpft werden kann.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="technischeUmgebungIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>Bezeichnung des Bereichs, für den der identifikator einmalig ist.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="technischeUmgebungIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>Wert des Ereignisidentifikators  </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="technischeUmgebungEigenschaft" type="WL_TechnischeUmgebungEigenschaft" minOccurs="0">
							<xs:annotation>
								<xs:documentation>environmentCharacteristic: eine Umschreibung, bis zu welchem Umfang die beschriebene Umgebung die Zwecke erfüllt. Empfohlene Werte: 
Nicht weiter spezifiziert: es wurde auch nicht versucht, weiter zu spezifizieren. 
Funktionstüchtig: die Umgebung taugt für das Rendering. Es ist nicht bekannt, ob es die optimalen oder minimalen Anforderungen erfüllt.
Minimum. Die minimalen Anforderungen
Empfohlen: Umgebung für eine optimale Darstellung</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="technischeUmgebungZweck" type="WL_TechnischeUmgebungZweck" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>environmentPurpose: Benutzung, welche durch die Umgebung unterstützt wird. Unterschiedliche Systeme können für unterschiedliche Zwecke eingesetzt werden: z.B. für Modifikation, Editierung, Rendering. Die Information muss von der gleichen Stelle herkommen wie der Beschrieb der EDV-Umgebung (Überlieferer, Repositorium, Registry). Z.B. Rendering, Editierung, Konvertierung, Ausdruck, Veränderung etc.   </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="technischeUmgebungAnmerkung" type="xs:string" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>environmentNote: zusätzliche Information zur Umgebung. Es ist möglich, dass zusätzliche Information und Erklärungen notwendig sind.  </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="technischeUmgebungAbhaengigkeit" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>dependency: Information zu Komponenten (keine Software) oder Dateien, welche zum Rendering benötigt werden. Objekte, von denen das Rendering bzw. die Handhabung anderer Objekte abhängig sind, sollten auch archiviert werden. Dieses Feld verzeichnet weder Hard- oder Software noch Objekte, welche mit dem Objekt in einer strukturierten Beziehung stehen. 
Es ist vom Repositorium abhängig, was unter Abhängigkeit verstanden wird. 
Die Objekte, welche eine Abhängigkeit bewirken, können intern oder extern gespeichert werden. 
  </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="technischeUmgebungAbhaengigkeitName" type="xs:string" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>dependencyName: Bezeichnung für Zusatzobjekt. Die Bezeichnung ist nicht zwingend vom Schlüssel ableitbar.  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="technischeUmgebungAbhaengigkeitIdentifikation" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>dependencyIdentifier: eine eindeutige Bezeichnung zur Identifikation des Zusatzobjektes. Die Bezeichnung muss im Repositorium eindeutig sein, aber nicht unbedingt global.  </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="technischeUmgebungAbhaengigkeitIdentifikatorTyp" type="xs:string">
													<xs:annotation>
														<xs:documentation>dependencyIdentifierType: Bezeichnung des Bereichs, für den der Identifikator des Zusatzobjekts einmalig ist. Nur notwendig, wenn der Schlüssel auf verschiedene Arten interpretiert werden kann   </xs:documentation>
													</xs:annotation>
												</xs:element>
												<xs:element name="technischeUmgebungAbhaengigkeitIdentifikatorWert" type="xs:string">
													<xs:annotation>
														<xs:documentation>dependencyIdentifierValue: Wert des Identifikators für das Zusatzobjekt. abhängig vom Typ des Identifikators.</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="software" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>software: benötigte Software, um das Objekt zu benutzen oder zu rendern. Es sollte mindestens eine Software-Umgebung erfasst werden, die Wahl ist Sache des Repositoriums. Eine Software-Umgebung kann selber wieder weitere Abhängigkeiten aufweisen. 
Empfohlen wird auch hier eine formale Registry (interne oder externe Datenbank).   </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="softwareName" type="xs:string">
										<xs:annotation>
											<xs:documentation>swName: Hersteller und Titel der Software-Applikation. Zur besseren Verständlichkeit kann auch der Hersteller erfasst werden.  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="softwareVersion" type="xs:string" minOccurs="0">
										<xs:annotation>
											<xs:documentation>swVersion: Version(en) der Software. Ist keine Version verfügbar, so kann auch ein Software-Datum (Einführung im Markt) verwendet werden. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="softwareTyp" type="WL_SoftwareTyp">
										<xs:annotation>
											<xs:documentation>swType: Klasse oder Kategorie der Software. Es können mehrere verschiedene Software-Ebenen erforderlich sein. Empfohlene Werte: 
Renderer: Applikation zur Ausgabe des Formates z.B. image viewer, video player, Java virtual maschine 
Hilfstools: z.B. run tim libraries, plug-ins, compressionen/decompressionen, utilities 
Betriebssysteme: 
Treiber: 
  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="softwareAnmerkungen" type="xs:string" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>swOtherInformation: Zusätzliche Erfordernisse oder Instruktionen. Kann auch URI sein, welcher auf interne / externe Dokumentation verweist.  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="softwareAbhaengigkeit" type="xs:string" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>swDependency: Name und soweit verfügbar Version der Softwarekomponenten, welche von der in softwareName referenzierten Software benötigt werden. z.B. ein Perl-Script (genannt in softwareName) läuft nur mit dem Perl-Module (genannt in softwareAbhaengigkeit). </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="hardware" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>hardware: Hardware, welche für die Software bzw. Benützeranforderungen (in den vorangegangenen Feldern) vorausgesetzt wird. Es sollte mindestens eine Hardware-Konfiguration genannt werden. 
Empfohlen wird eine zentrale Registry. 
</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="hardwareName" type="xs:string">
										<xs:annotation>
											<xs:documentation>hwName: Hersteller, Modell und Version der Hardware. Der Hersteller sollte genannt werden, wenn dies zur besseren Verständlichkeit beiträgt. Sofern sachdienlich sind auch die Firmware oder andere Komponenten anzugeben.  </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="hardwareTyp" type="WL_HardwareTyp">
										<xs:annotation>
											<xs:documentation>hwType: Klasse oder Kategorie der Hardware. Empfohlene Werte: 
Prozessor 
Memory 
Peripheriegeräte 
Speichergeräte </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="hardwareAnmerkungen" type="xs:string" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>hwOtherInformation: Zusätzliche Erfordernisse oder Instruktionen für die Hardware. Eine Dokumentation zu den Ressourcen eines Rechners (Memory, Speicherplatz, Taktrate etc.) kann nützlich sein. Zur Installation / Betrieb einer Hardware können detailliertere Angaben sinnvoll sein. Kann auch URI sein, welcher auf interne / externe Dokumentation verweist.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="xmlID" type="xs:ID"/>
					<xs:attribute name="version" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="1.1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="ereignis" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Event</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ereignisIdentifikator">
							<xs:annotation>
								<xs:documentation>eventIdentifier: Jedes im Repositorium aufgezeichnete Ereignis muss eine eindeutige Kennzeichnung haben, mittels der es mit Objekten, Instanzen und anderen Ereignissen verknüpft werden kann. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="ereignisIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>eventIdentifierType: Bezeichnung des Bereichs, für den der Ereignisidentifikator einmalig ist </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="ereignisIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>eventIdentifierValue: Wert des Ereignisidentifikators  </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="ereignis_Kategorie" type="WL_ereignis_Kategorie">
							<xs:annotation>
								<xs:documentation>eventType: Kategorie des Ereignisses. Die Kategorisierung der Ereignisse unterstützt die maschinelle Verarbeitung von Ereignissen, insbesondere beim Reporting. • Übernahme 
 • Akzession 
 • Daten-Komprimierung 
 • Daten- Dekomprimierung 
 • Kassation 
 • Daten-Verschlüsselung 
 • Daten-Entschlüsselung 
 • Überprüfung der Authentizität 
 • Überprüfen der Integrität 
 • Ausgabe an Benutzer 
 • hash-Wert berechnen 
 • Daten-Migration 
 • Normalisierung 
 • Reproduktion 
 • Validierung 
 • Virenprüfung 
   </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="ereignisZeitpunkt">
							<xs:annotation>
								<xs:documentation>eventDateTime: Datum und Zeit bzw. Zeitdauer des Ereignisses. Datum-/Zeitformat gemäss ISO 8601. 2006-07-16T19:20:30+01:00 Zeitzone und Zeit möglichst genau aufzeichnen.   </xs:documentation>
							</xs:annotation>
							<xs:simpleType>
								<xs:union memberTypes="xs:date xs:dateTime"/>
							</xs:simpleType>
						</xs:element>
						<xs:element name="ereignisAnmerkungen" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>eventDetail: zusätzliche Informationen zum Ereignis. eventDetail ist nicht für die maschinelle Verarbeitung gedacht. Es verzeichnet jegliche zusätzliche Information über das Ereignis.  </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="ereignisResultatsInformation" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>eventOutcomeInformation: Archive können eine codierte Ergebnisliste für eventOutcome einrichten und zusätzliche Informationen in eventOutcomeDetail verzeichnen. Da Ereignisse mehr als ein Ergebnis haben können, sind die Informationen wiederholbar. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="ereignisResultat" type="WL_EreignisResultat" minOccurs="0">
										<xs:annotation>
											<xs:documentation>eventOutcome: Kategorie des Gesamtergebnisses auf der Ebene Erfolg-Teilerfolg-Fehlschlag. Die Codierung des Ergebnisses kann für die maschinelle Verarbeitung und Reporting nützlich sein. Das kontrollierte Vokabular sollte für die maschinelle Verarbeitung geeignet sein. Detailliertere Informationen können in eventOutcomeDetail verzeichnet werden. 
Die Ereignisse sollten so detailliert definiert werden, dass jedes Ereignis ein einziges Ergebnis hat. 
</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="ereignisResultatAnmerkungen" minOccurs="0">
										<xs:annotation>
											<xs:documentation>eventOutcomeDetail: nicht codierte, detaillierte Beschreibung des Ergebnisses. Ergebnisse können so komplex sein, dass sie allein mit einem codierten Eintrag nicht genügend dokumentiert sind. Kann Error- oder Warnmeldungen oder Hinweise auf Log-Files verzeichnen. 
Bei Authentizitätsprüfungen werden alle Anomalien oder Besonderheiten hier verzeichnet. 
   </xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:any namespace="##any" processContents="lax"/>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepfterAgentIdentifikator" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>linkingAgentIdentifier: Informationen über bearbeitende Instanzen (Personen/Stellen/Programme) des Ereignis. Beziehungen zwischen Bearbeitern und Ereignissen müssen für digitale Daten oft extra dokumentiert werden. Die Instanz (Bearbeiter) sollte möglichst verzeichnet werden. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepfterAgentIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingAgentIdentifierType: Bezeichnung des Bereichs, für den der Identifikator der Instanz einmalig ist.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepfterAgentIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingAgentIdentifierValue: Wert des Identifikators der Instanz </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepfterAgentRolle" type="WL_VerknuepfterAgentRolle" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>linkingAgentRole: Rolle der Instanz im fraglichen Ereignis. Ereignisse können mehr als einen Bearbeiter haben. Die Rolle der Bearbeiter sollte dokumentiert sein. Ausführendes Programm 
Bevollmächtigter 
Durchführende Person 
Prüfender 
 </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="LinkAgentXmlID" type="xs:IDREF" use="optional"/>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepftesObjektIdentifikator" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>linkingObjectIdentifier: Informationen über Objekte, die mit dem Ereignis verknüpft sind.  Beziehungen zwischen Objekten und Ereignissen müssen für digitale Daten oft extra dokumentiert werden.  </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepftesObjektIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingObjectIdentifierType: Bezeichnung des Bereichs, für den der Objektidentifikator einmalig ist. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepftesObjektIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>linkingObjectIdentifierValue: Wert des Objektidentifikators   </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="LinkObjectXmlID" type="xs:IDREF" use="optional"/>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="verknuepfteTechnischeUmgebungIdentifikator" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Referenz auf eine technische Umgebung, in der das Objekt darstellbar ist.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="verknuepfteTechnischeUmgebungIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>Bezeichnung des Bereichs, für den der Identifikator der technischen Umgebung einmalig ist.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="verknuepfteTechnischeUmgebungIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>Wert des Identifikators der technischen Umgebungsbeschreibung.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="LinkEnvironmentXmlID" type="xs:IDREF" use="optional"/>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="xmlID" type="xs:ID"/>
					<xs:attribute name="version" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="1.1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="agent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>agent</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="agentIdentifikator" maxOccurs="unbounded">
							<xs:annotation xml:lang="de">
								<xs:documentation>agentIdentifier: Zur Nachvollziehbarkeit der Archivierungshandlungen müssen die daran beteiligten Instanzen eindeutig identifiziert werden können. Alle Instanzen, die mit den archivierten Unterlagen zu tun haben, müssen auf diese Weise einmal eindeutig identifiziert werden. Der Aufwand hält sich also in Grenzen. Nötig ist zur Verlinkung von Ereignissen mit Akteuren auf jeden Fall ein eindeutiger Identifikator.  </xs:documentation>
								<xs:documentation xml:lang="en">This is a test.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="agentIdentifikatorTyp" type="xs:string">
										<xs:annotation>
											<xs:documentation>agentIdentifierType: Bezeichnung des Bereichs, für den der Identifikator der Instanz einmalig ist. </xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="agentIdentifikatorWert" type="xs:string">
										<xs:annotation>
											<xs:documentation>agentIdentifierValue: Wert des Identifikators der Instanz  </xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:sequence>
								<xs:anyAttribute namespace="http://www.w3.org/1999/xlink"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="agentName" type="xs:string" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>agentName: Freier Text zur genaueren oder weiteren Identifikation der Instanz. Ist besser menschenlesbar als die kodierte Form unter agentIdentifikatorWert. Personenname; Softwarename     </xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="agentTyp" type="WL_AgentTyp" minOccurs="0">
							<xs:annotation>
								<xs:documentation>agentType: Eine Beschreibung des Typus der Instanz. Dient zur einfacheren Verwaltung der im System verzeichneten Instanzen. </xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="xmlID" type="xs:ID"/>
					<xs:attribute name="version" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="1.1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Technische_Daten" type="t_Technische_Daten"/>
</xs:schema>
